----------------------------------
TEST ITERATOR VECTOR
----------------------------------
*---+---+---*
| E | C | S |
| M | A | I |
| P | P | Z |		VECTOR		|
| T | A | E |
| Y | C |   |
*---+---+---*
0
0
| 0 | 5 | 5| [ 0 0 0 0 0 ]
Pre inc
25 | 25
Pre dec
0 | 0
Post inc
0 | 25
Post dec
25 | 0
###############################################
10
15
const_ite +=: 21
const_ite -=: 42
(it == const_it): 0
(const_ite - it): -2
(ite + 3 == it): 0
| 0 | 5 | 5| [ 0 42 20 21 10 ]
----------------------------------
TEST ITERATOR VECTOR ARROW
----------------------------------
| 0 | 5 | 5| [ 1 2 3 4 5 ]
2
2
3
5
2
2
3
5
4
4
2
2
4
4
3
1
----------------------------------
0 | 0
| 0 | 5 | 5| [ 0 0 0 0 0 ]
| 0 | 5 | 5| [ 3 6 9 12 15 ]
3 | 0
1
0
(6)|6
(0)|9
(0)|12
(3)|12
TEST OFFSET
9
12
9
12
15
----------------------------------
TEST ITERATOR EQ_OPE
----------------------------------
| 0 | 5 | 5| [ 5 4 3 2 1 ]
1
		ft_eq_ope:
0
1
0
1
0
1
0
1
1
1
0
0
0
0
1
1
1
1
0
0
0
0
1
1
0
1
0
1
0
1
0
1
1
1
0
0
0
0
1
1
1
1
0
0
0
0
1
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
1
1
0
0
0
0
1
1
0
0
1
1
1
1
0
0
1
1
0
0
0
0
1
1
0
0
1
1
1
1
0
0
----------------------------------
BOUCLE DE REMPLISSAGE
----------------------------------
| 0 | 7 | 7|	[ 20 20 20 20 20 20 20 ]

| 0 | 14 | 8|	[ 15 20 20 20 20 20 20 20 ]

| 0 | 14 | 9|	[ 12 15 20 20 20 20 20 20 20 ]

| 0 | 14 | 10|	[ 9 12 15 20 20 20 20 20 20 20 ]

| 0 | 14 | 11|	[ 6 9 12 15 20 20 20 20 20 20 20 ]

----------------------------------
TEST ==> COPY & SWAP
----------------------------------
TEST_COPY(with =)
| 0 | 12 | 12|	[ 3 6 9 12 15 20 20 20 20 20 20 20 ]

TEST_COPY(constructor)
| 0 | 12 | 12|	[ 3 6 9 12 15 20 20 20 20 20 20 20 ]

copy to
| 0 | 14 | 12|	[ 3 6 9 12 15 20 20 20 20 20 20 20 ]

len: 5
	-- PART ONE --
| 0 | 5 | 5|	[ 7 14 21 28 35 ]

| 0 | 3 | 3|	[ 5 4 3 ]

| 0 | 12 | 12|	[ 3 6 9 12 15 20 20 20 20 20 20 20 ]

	-- PART TWO --
| 0 | 12 | 12|	[ 3 6 9 12 15 20 20 20 20 20 20 20 ]

| 1 | 3 | 0|	[ ]

| 0 | 12 | 3|	[ 5 4 3 ]

BEFORE SWAP
foo contains:
| 0 | 3 | 3|	[ 15 15 15 ]

bar contains:
| 0 | 5 | 5|	[ 42 42 42 42 42 ]

AFTER SWAP
foo contains:
| 0 | 5 | 5|	[ 42 42 42 42 42 ]

bar contains:
| 0 | 3 | 3|	[ 15 15 15 ]

Iterator validity:
1
1
----------------------------------
TEST ==> ?
----------------------------------
| 0 | 14 | 10|	[ 3 6 9 12 15 20 20 20 20 20 ]

| 0 | 28 | 18|	[ 3 6 9 12 15 20 20 20 20 20 43 43 43 43 43 43 43 43 ]

| 0 | 28 | 10|	[ 3 6 9 12 15 20 20 20 20 20 ]

| 0 | 28 | 23|	[ 3 6 9 12 15 20 20 20 20 20 44 44 44 44 44 44 44 44 44 44 44 44 44 ]

| 0 | 28 | 5|	[ 3 6 9 12 15 ]

| 0 | 28 | 5|	[ 3 6 9 12 15 ]

| 0 | 28 | 5|	[ 3 6 9 12 15 ]

RESIZE(87)
| 0 | 87 | 87|	[ 3 6 9 12 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]

| 0 | 87 | 5|	[ 3 6 9 12 15 ]

----------------------------------
TEST ==> PUSH_POP
----------------------------------
| 0 | 8 | 8|	
push_back():

| 0 | 16 | 9|	
AAAAAAAA
BBBBBBB
CCCCCC
DDDDD
EEEE
FFF
GG
H
One long string
| 0 | 1 | 1|	
Another long string
| 0 | 16 | 8|	
AAAAAAAA
BBBBBBB
CCCCCC
DDDDD
EEEE
FFF
GG
H
| 1 | 1 | 0|	
----------------------------------
TEST ==> AT
----------------------------------
vct_at.at(): 21 | vct_at[]: 21
vct_at.at(): 18 | vct_at[]: 18
vct_at.at(): 15 | vct_at[]: 15
vct_at.at(): 12 | vct_at[]: 12
vct_at.at(): 9 | vct_at[]: 9
vct_at.at(): 6 | vct_at[]: 6
vct_at.at(): 3 | vct_at[]: 3
| 0 | 7 | 7|	[ 21 18 15 12 9 6 3 ]

front(): 21 21
back(): 3 3
Catch exception: Request is out of bounds
vct_at2[]: 21
vct_at2[]: 18
vct_at2[]: 15
vct_at2[]: 12
vct_at2[]: 9
vct_at2[]: 6
vct_at2[]: 3
| 0 | 7 | 7|	[ 21 18 15 12 9 6 3 ]

front(): 21 21
back(): 3 3
vct_c.at(): 21
vct_c.at(): 18
vct_c.at(): 15
vct_c.at(): 12
vct_c.at(): 9
vct_c.at(): 6
vct_c.at(): 3
Catch exception: Request is out of bounds
| 0 | 7 | 7|	[ 21 18 15 12 9 6 3 ]

----------------------------------
TEST ==> ERASE
----------------------------------
| 0 | 1 | 1| [ 5 ]
| 0 | 2 | 2| [ 3 5 ]
| 0 | 3 | 3| [ 1 3 5 ]
| 0 | 4 | 4| [ 4 1 3 5 ]
| 0 | 5 | 5| [ 2 4 1 3 5 ]
| 0 | 6 | 6| [ 1 2 4 1 3 5 ]
| 0 | 7 | 7| [ 0 1 2 4 1 3 5 ]
| 1 | 0 | 0 |	[ ]
INSERT
| 0 | 1 | 1| [ 1 ]
PUSHBACK
| 0 | 1 | 1 |	[ 1 ]
| 0 | 1 | 1| [ 1 ]
INSERT
| 0 | 2 | 2 |	[ 2 1 ]
| 0 | 2 | 2| [ 2 1 ]
SWAP
| 0 | 8 | 7 |	[ 0 1 2 4 1 3 5 ]
| 0 | 7 | 7| [ 0 1 2 4 1 3 5 ]
CLEAR
| 1 | 8 | 0 |	[ ]
| 1 | 0 | 0| [ ]
RESERVE
| 1 | 10 | 0 |	[ ]
| 1 | 0 | 0| [ ]
RESIZE
----------------------------------
| 1 | 0 | 0| [ ]
| 0 | 1 | 1| [ 1 ]
| 0 | 2 | 2| [ 1 2 ]
| 0 | 3 | 3| [ 1 2 3 ]
| 0 | 4 | 4| [ 1 2 3 4 ]
| 0 | 5 | 5| [ 1 2 3 4 5 ]
| 0 | 6 | 6| [ 1 2 3 4 5 6 ]
| 0 | 7 | 7| [ 1 2 3 4 5 6 7 ]
| 0 | 8 | 8| [ 1 2 3 4 5 6 7 8 ]
| 0 | 9 | 9| [ 1 2 3 4 5 6 7 8 9 ]
REMPLI!
----------------------------------
| 0 | 9 | 9| [ 1 2 3 4 5 6 7 8 9 ]
| 0 | 5 | 5| [ 1 2 3 4 5 ]
| 0 | 8 | 8| [ 1 2 3 4 5 100 100 100 ]
| 0 | 12 | 12| [ 1 2 3 4 5 100 100 100 0 0 0 0 ]
----------------------------------
| 1 | 0 | 0| [ ]
| 0 | 13 | 13| [ 53 53 53 53 53 53 53 53 53 53 53 53 53 ]
----------------------------------
TEST ==> ASSIGN
----------------------------------
| 0 | 7 | 7| [ 21 18 15 12 9 6 3 ]
| 0 | 4 | 4| [ 20 15 10 5 ]
	### After assign(): ###
| 0 | 4 | 4| [ 20 15 10 5 ]
| 0 | 2 | 2| [ 42 42 ]
| 0 | 4 | 4| [ 20 15 10 5 ]
| 0 | 4 | 4| [ 21 21 21 21 ]
| 0 | 6 | 6| [ 84 84 84 84 84 84 ]
	### assign() on enough capacity and low size: ###
| 0 | 5 | 5| [ 53 53 53 53 53 ]
| 0 | 3 | 3| [ 20 15 10 ]
----------------------------------
TEST ==> CMP_RELATIONNAL_OP
----------------------------------
| 0 | 4 | 4| [ 0 0 0 0 ]
| 0 | 4 | 4| [ 0 0 0 0 ]
############### [0] ###############
eq: 1 | ne: 0
lt: 0 | le: 1
gt: 0 | ge: 1
############### [1] ###############
eq: 1 | ne: 0
lt: 0 | le: 1
gt: 0 | ge: 1
| 0 | 4 | 4| [ 0 0 0 0 ]
| 0 | 10 | 10| [ 0 0 0 0 0 0 0 0 0 0 ]
############### [2] ###############
eq: 0 | ne: 1
lt: 1 | le: 1
gt: 0 | ge: 0
############### [3] ###############
eq: 0 | ne: 1
lt: 0 | le: 0
gt: 1 | ge: 1
| 0 | 4 | 4| [ 0 0 42 0 ]
| 0 | 10 | 10| [ 0 0 0 0 0 0 0 0 0 0 ]
############### [4] ###############
eq: 0 | ne: 1
lt: 0 | le: 0
gt: 1 | ge: 1
############### [5] ###############
eq: 0 | ne: 1
lt: 1 | le: 1
gt: 0 | ge: 0
| 0 | 10 | 10| [ 0 0 0 0 0 0 0 0 0 0 ]
| 0 | 4 | 4| [ 0 0 42 0 ]
############### [6] ###############
eq: 0 | ne: 1
lt: 1 | le: 1
gt: 0 | ge: 0
############### [7] ###############
eq: 0 | ne: 1
lt: 0 | le: 0
gt: 1 | ge: 1
| 0 | 10 | 10| [ 0 0 0 0 0 0 0 0 0 0 ]
| 0 | 4 | 4| [ 0 0 42 0 ]
----------------------------------
TEST ==> INSERT
----------------------------------
| 0 | 10 | 10| [ 70 63 56 49 42 35 28 21 14 7 ]
| 0 | 3 | 3| [ 21 21 42 ]
| 0 | 4 | 4| [ 21 42 21 42 ]
| 0 | 6 | 6| [ 21 42 21 42 84 84 ]
| 0 | 4 | 4| [ 21 42 21 42 ]
| 0 | 14 | 14| [ 21 42 70 63 56 49 42 35 28 21 14 7 21 42 ]
----------------------------------
| 1 | 0 | 0| [ ]
| 0 | 17 | 17| [ 70 63 56 21 42 70 63 56 49 42 35 28 21 14 7 21 42 ]
| 0 | 20 | 20| [ 70 63 56 21 42 70 63 56 49 42 35 28 21 14 7 21 42 70 63 56 ]
insert return:
42
84
----------------------------------------
| 0 | 22 | 22| [ 70 63 56 21 42 84 70 63 56 49 42 35 28 21 14 7 21 42 70 63 56 42 ]
----------------------------------
TEST ==> INSERT
----------------------------------
ft (C1)
